package cloudformation

{{if not .IsCustomProperty}}
import (
	"encoding/json"
	"fmt"
	"errors"
	"bytes"
)
{{end}}
// {{.StructName}} AWS CloudFormation Resource ({{.Name}})
// See: {{.Resource.Documentation}}
type {{.StructName}} struct {
    {{range $name, $property := .Resource.Properties}}
    // {{$name}} AWS CloudFormation Property
    // Required: {{$property.Required}}
    // See: {{$property.Documentation}}
    {{$name}} {{if (or ($property.IsPolymorphic) ($property.IsCustomType) )}}*{{end}}{{$property.GoType $.Basename $name}} `json:"{{$name}}{{if (not (and ($property.IsNumeric) ($property.Required)))}},omitempty{{end}}"`
    {{end}}
	{{if .HasUpdatePolicy }}// _updatePolicy represents a CloudFormation UpdatePolicy
	_updatePolicy *UpdatePolicy{{ end }}

	{{if .HasCreationPolicy }}// _creationPolicy represents a CloudFormation CreationPolicy
	_creationPolicy *CreationPolicy
	{{ end }}
	// _deletionPolicy represents a CloudFormation DeletionPolicy
	_deletionPolicy DeletionPolicy

    // _dependsOn stores the logical ID of the resources to be created before this resource
    _dependsOn []string

    // _metadata stores structured data associated with this resource
    _metadata map[string]interface{}

}

// AWSCloudFormationType returns the AWS CloudFormation resource type
func (r *{{.StructName}}) AWSCloudFormationType() string {
    return "{{.Name}}"
}

// DependsOn returns a slice of logical ID names this resource depends on.
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html
func (r *{{.StructName}}) DependsOn() []string {
	return r._dependsOn
}
// SetDependsOn specify that the creation of this resource follows another.
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html
func (r *{{.StructName}}) SetDependsOn(dependencies []string) {
	r._dependsOn = dependencies
}
// Metadata returns the metadata associated with this resource.
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-metadata.html
func (r *{{.StructName}}) Metadata() map[string]interface{} {
	return r._metadata
}
// SetMetadata enables you to associate structured data with this resource.
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-metadata.html
func (r *{{.StructName}}) SetMetadata(metadata map[string]interface{}) {
	r._metadata = metadata
}
// SetDeletionPolicy applies an AWS CloudFormation DeletionPolicy to this resource
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html
func (r *{{.StructName}}) SetDeletionPolicy(policy DeletionPolicy) {
	r._deletionPolicy = policy
}
{{if .HasUpdatePolicy}}
// SetUpdatePolicy applies an AWS CloudFormation UpdatePolicy to this resource
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html
func (r *{{.StructName}}) SetUpdatePolicy(policy *UpdatePolicy) {
	r._updatePolicy = policy
}
{{end}}
{{if .HasCreationPolicy}}
// SetCreationPolicy applies an AWS CloudFormation CreationPolicy to this resource
// see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
func (r *{{.StructName}}) SetCreationPolicy(policy *CreationPolicy) {
	r._creationPolicy = policy
}
{{end}}
{{if not .IsCustomProperty}}
// MarshalJSON is a custom JSON marshalling hook that embeds this object into
// an AWS CloudFormation JSON resource's 'Properties' field and adds a 'Type'.
func (r {{.StructName}}) MarshalJSON() ([]byte, error) {
	type Properties {{.StructName}}
	return json.Marshal(&struct{
		Type string
		{{if .IsCustomProperty}}Properties{{else}}Properties Properties{{end}}
		DependsOn []string `json:"DependsOn,omitempty"`
		Metadata  map[string]interface{} `json:"Metadata,omitempty"`
		DeletionPolicy DeletionPolicy `json:"DeletionPolicy,omitempty"`
		{{if .HasUpdatePolicy}}UpdatePolicy *UpdatePolicy `json:"UpdatePolicy,omitempty"`{{end}}
		{{if .HasCreationPolicy}}CreationPolicy *CreationPolicy `json:"CreationPolicy,omitempty"`{{end}}
	}{
		Type: r.AWSCloudFormationType(),
		Properties: (Properties)(r),
		DependsOn: r._dependsOn,
		Metadata: r._metadata,
		DeletionPolicy: r._deletionPolicy,
		{{if .HasUpdatePolicy}}UpdatePolicy: r._updatePolicy,{{end}}
		{{if .HasCreationPolicy}}CreationPolicy: r._creationPolicy,{{end}}
	})
}

// UnmarshalJSON is a custom JSON unmarshalling hook that strips the outer
// AWS CloudFormation resource object, and just keeps the 'Properties' field.
func (r *{{.StructName}}) UnmarshalJSON(b []byte) error {
	type Properties {{.StructName}}
	res := &struct {
		Type string
		{{if .IsCustomProperty}}Properties{{else}}Properties *Properties{{end}}
		DependsOn []string
		Metadata map[string]interface{}
	}{}

	dec := json.NewDecoder(bytes.NewReader(b))
	dec.DisallowUnknownFields() // Force error if unknown field is found

	if err := dec.Decode(&res); err != nil {
		fmt.Printf("ERROR: %s\n", err)
		return err
	}

	// If the resource has no Properties set, it could be nil
	if res.Properties != nil {
		*r = {{.StructName}}(*res.Properties)
	}
	if res.DependsOn != nil {
		r._dependsOn = res.DependsOn
	}
	if res.Metadata != nil {
		r._metadata = res.Metadata
	}

	return nil
}

// GetAll{{.StructName}}Resources retrieves all {{.StructName}} items from an AWS CloudFormation template
func (t *Template) GetAll{{.StructName}}Resources () map[string]*{{.StructName}} {
    results := map[string]*{{.StructName}}{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case {{.StructName}}:
			results[name] = &resource
		case *{{.StructName}}:
			// We found a strongly typed resource of the correct type; use it
			results[name] = resource
		case map[string]interface{}:
			// We found an untyped resource (likely from JSON) which *might* be
			// the correct type, but we need to check it's 'Type' field
			if resType, ok := resource["Type"]; ok {
				if resType == "{{.Name}}" {
					// The resource is correct, unmarshal it into the results
					if b, err := json.Marshal(resource); err == nil {
						var result {{.StructName}}
						if err := json.Unmarshal(b, &result); err == nil {
							t.Resources[name] = &result
							results[name] = &result
						}
					}
				}
			}
		}
	}
	return results
}

// Get{{.StructName}}WithName retrieves all {{.StructName}} items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) Get{{.StructName}}WithName (name string) (*{{.StructName}}, error) {
	if untyped, ok := t.Resources[name]; ok {
		switch resource := untyped.(type) {
		case {{.StructName}}:
			return &resource, nil
		case *{{.StructName}}:
			// We found a strongly typed resource of the correct type; use it
			return resource, nil
		case map[string]interface{}:
			// We found an untyped resource (likely from JSON) which *might* be
			// the correct type, but we need to check it's 'Type' field
			if resType, ok := resource["Type"]; ok {
				if resType == "{{.Name}}" {
					// The resource is correct, unmarshal it into the results
					if b, err := json.Marshal(resource); err == nil {
						var result {{.StructName}}
						if err := json.Unmarshal(b, &result); err == nil {
							t.Resources[name] = &result
							return &result, nil
						}
					}
				}
			}
		}
	}
    return nil, errors.New("resource not found")
}
{{end}}
