// Code generated by "go generate". Please don't change this file directly.

package {{.PackageName}}

import (
  "bytes"
	"sort"
	"encoding/json"
	"io"

	"github.com/awslabs/goformation/v7/cloudformation/utils"
)

// {{.Name}} is a helper struct that can hold either a {{.TypesJoined}} value
type {{.Name}} struct {
	{{range $type := $.Property.PrimitiveTypes}}
	{{$type}} *{{convertToGoType $type}}{{end}}

	{{range $type := $.Property.PrimitiveItemTypes}}
	{{$type}}Array *[]{{convertToGoType $type}}{{end}}

	{{range $type := $.Property.InclusivePrimitiveItemTypes}}
    {{$type}}Array *[]{{convertToGoType $type}}{{end}}

	{{range $type := $.Property.Types}}
	{{$type}} *{{$.Basename}}_{{$type}}{{end}}

	{{range $type := $.Property.ItemTypes}}
	{{$type}}Array *[]{{$.Basename}}_{{$type}}{{end}}

    {{range $type := $.Property.InclusiveItemTypes}}
    {{$type}}Array *[]{{$.Basename}}_{{$type}}{{end}}
}

func (r {{.Name}}) value() interface{} {
	ret := []interface{}{}

	{{range $type := $.Property.PrimitiveTypes}}
		if r.{{$type}} != nil {
			ret = append(ret, r.{{$type}})
		}
	{{end}}

	{{range $type := $.Property.PrimitiveItemTypes}}
		if r.{{$type}}Array != nil {
			ret = append(ret, r.{{$type}}Array)
		}
	{{end}}

	{{range $type := $.Property.InclusivePrimitiveItemTypes}}
        if r.{{$type}}Array != nil {
            ret = append(ret, r.{{$type}}Array)
        }
    {{end}}

	{{ if (.Property.Types) }}
		{{range $type := $.Property.Types}}
			if r.{{$type}} != nil {
				ret = append(ret, *r.{{$type}})
			}
		{{end}}
	{{end}}

	{{range $type := $.Property.ItemTypes}}
		if r.{{$type}}Array != nil {
			ret = append(ret, r.{{$type}}Array)
		}
	{{end}}

	{{range $type := $.Property.InclusiveItemTypes}}
        if r.{{$type}}Array != nil {
            ret = append(ret, r.{{$type}}Array)
        }
    {{end}}

	sort.Sort(utils.ByJSONLength(ret)) // Heuristic to select best attribute
	if len(ret) > 0 {
		return ret[0]
	}

	return nil
}

func (r {{.Name}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.value())
}

// Hook into the marshaller
func (r *{{.Name}}) UnmarshalJSON(b []byte) error {

	// Unmarshal into interface{} to check it's type
	var typecheck interface{}
	if err := json.Unmarshal(b, &typecheck); err != nil {
		return err
	}

	switch val := typecheck.(type) {

		{{range $type := $.Property.PrimitiveTypes}}
			case {{convertToGoType $type}}:
			r.{{$type}} = &val
		{{end}}

		{{range $type := $.Property.PrimitiveItemTypes}}
			case []{{convertToGoType $type}}:
			r.{{$type}}Array = &val
		{{end}}

        {{range $type := $.Property.InclusivePrimitiveItemTypes}}
			case []{{convertToGoType $type}}:
			r.{{$type}}Array = &val
		{{end}}

		case map[string]interface{}:
			val = val // This ensures val is used to stop an error

			reader := bytes.NewReader(b)
			decoder := json.NewDecoder(reader)
			decoder.DisallowUnknownFields()
			reader.Seek(0, io.SeekStart)

		{{range $type := $.Property.Types}}
			if err := decoder.Decode(&r.{{$type}}); err != nil {
				r.{{$type}} = nil
			}
		  reader.Seek(0, io.SeekStart)
		{{end}}

		case []interface{}:
		{{range $type := $.Property.PrimitiveItemTypes}}
			json.Unmarshal(b, &r.{{$type}}Array)
		{{end}}
		{{range $type := $.Property.InclusivePrimitiveItemTypes}}
			json.Unmarshal(b, &r.{{$type}}Array)
		{{end}}
		{{range $type := $.Property.ItemTypes}}
            json.Unmarshal(b, &r.{{$type}}Array)
        {{end}}
        {{range $type := $.Property.InclusiveItemTypes}}
            json.Unmarshal(b, &r.{{$type}}Array)
        {{end}}

	}

	return nil
}
